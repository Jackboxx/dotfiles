# vim:ft=yaml.ansible
- name: System Configuration
  hosts: localhost
  connection: local

  vars:
    user: "{{ lookup('ansible.builtin.env', 'USER') }}"
    home_dir: "{{ lookup('ansible.builtin.env', 'HOME') }}"
    config_dir: "{{ home_dir }}/.config"
    project_dir: "{{ home_dir }}/projects"
    dotfiles_dir: "{{ project_dir }}/dotfiles" 
    qmk_dependencies: 
      - python-pip 
      - libffi 
      - qmk

  tasks: 
    - name: Create 'projects' directory
      ansible.builtin.file:
        path: "{{ project_dir }}"
        owner: "{{ user }}"
        state: directory

    - name: Create '.config' directory
      ansible.builtin.file:
        path: "{{ config_dir }}"
        owner: "{{ user }}"
        state: directory

    - name: Check dotfiles directory
      stat:
        path: "{{ dotfiles_dir }}"
      register: dotfiles

    - name: Clone 'dotfiles' repo
      git: 
        repo: "https://github.com/jackboxx/dotfiles"
        dest: "{{ dotfiles_dir }}"
      when: not dotfiles.stat.exists 

    - name: Create symbolic links for dotfiles
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/{{ item }}"
        dest:  "{{ config_dir }}/{{ item }}"
        owner: "{{ user }}"
        state: link
      loop: 
        - nvim
        - tmux 
        - i3
        - kitty
        - gitui
        - rofi
        - polybar
        - neofetch
        - systemd
        - picom.conf

    - name: Check .zshrc
      register: zshrc
      stat:
        path: "{{ home_dir }}/.zshrc"

    - name: Create symbolic links for .zshrc
      ansible.builtin.file:
        dest:  "{{ home_dir }}/.zshrc"
        owner: "{{ user }}"
        src: "{{ dotfiles_dir }}/.zshrc"
        state: link
      when: not zshrc.stat.exists

    - name: Get ZSH plugins
      ansible.builtin.shell: |
        cd {{ home_dir }}/.oh-my-zsh/plugins && git clone {{ item }}
      loop: 
        - https://github.com/zsh-users/zsh-autosuggestions
        - https://github.com/zsh-users/zsh-syntax-highlighting
        - https://github.com/softmoth/zsh-vim-mode

    - name: Copy GitHub keys
      ansible.builtin.copy:
        src: "{{ dotfiles_dir }}/private/personal-keys/github_ed25519"
        dest: "{{ home_dir }}/.ssh/github_ed25519"
        decrypt: true

    - name: Copy '.private.sh'
      ansible.builtin.copy:
        src: "{{ dotfiles_dir }}/private/other/.private.sh"
        dest: "{{ home_dir }}"
        decrypt: true

    - name: Copy 'private.lua'
      ansible.builtin.copy:
        src: "{{ dotfiles_dir }}/private/other/private.lua"
        dest: "{{ dotfiles_dir }}/nvim/after/plugin"
        decrypt: true

    - name: Setup SSH agent 
      ansible.builtin.shell: |
        systemctl --user enable --now ssh-agent

    - name: Create group for keyboard firmware
      group:
        name: plugdev
        state: present
      become: true

    - name: Add user to keyboard firmware group
      ansible.builtin.user:
        name: "{{ lookup('ansible.builtin.env', 'USER') }}"
        groups: plugdev
        append: yes
      become: true

    - name: Check keyboard file
      stat:
        path: /etc/udev/rules.d/50-zsa.rules
      register: keyboard

    - name: Add keyboard firmware configuration file
      copy:
        dest: /etc/udev/rules.d/50-zsa.rules
        content: |
          # Rules for Oryx web flashing and live training
          KERNEL=="hidraw*", ATTRS{idVendor}=="16c0", MODE="0664", GROUP="plugdev"
          KERNEL=="hidraw*", ATTRS{idVendor}=="3297", MODE="0664", GROUP="plugdev"
          # Wally Flashing rules for the Moonlander and Planck EZ
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", \
              MODE:="0666", \
              SYMLINK+="stm32_dfu"
      become: true
      when: not keyboard.stat.exists

    - name: Installing QMK dependencies
      community.general.pacman:
        name: "{{ qmk_dependencies }}"
        state: present
      become: yes

    - name: Setup QMK
      ansible.builtin.shell: |
        qmk setup -y
